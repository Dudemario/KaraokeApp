"use strict";
exports.__esModule = true;
var constants_1 = require("./constants");
var utils_1 = require("./utils");
var LYRIC_LINE = /^((?:\[\d{2,}:\d{2}(?:\.\d{2,3})?\])+)(.*)$/; // [time]content | [time][time][...]content
var METADATA_LINE = /^\[(.+?):(.*?)\]$/; // [key:value]
/**
 * parse lrc string
 * @author mebtte<hi@mebtte.com>
 */
function parse(lrc) {
    var parsedLines = [];
    var lines = lrc.split('\n');
    for (var i = 0, length = lines.length; i < length; i += 1) {
        var raw = lines[i];
        /** lyric */
        var lyricMatch = raw.match(LYRIC_LINE);
        if (lyricMatch) {
            var timesPart = lyricMatch[1]; // [time][time]content --> [time][time]
            var times = timesPart.split(']['); // [time1][time2] --> [time1 | time2]
            for (var _i = 0, times_1 = times; _i < times_1.length; _i++) {
                var time = times_1[_i];
                var lyricLine = {
                    lineNumber: i,
                    raw: raw,
                    type: constants_1.LineType.LYRIC,
                    startMillisecond: (0, utils_1.timestampToMillsecond)(time.replace(/[[\]]/g, '')),
                    content: lyricMatch[2]
                };
                parsedLines.push(lyricLine);
            }
            continue;
        }
        /** metadata */
        var metadataMatch = raw.match(METADATA_LINE);
        if (metadataMatch) {
            var key = metadataMatch[1];
            var value = metadataMatch[2];
            var metadataLine = {
                lineNumber: i,
                raw: raw,
                type: constants_1.LineType.METADATA,
                key: key,
                value: value
            };
            parsedLines.push(metadataLine);
            continue;
        }
        /** invalid line */
        parsedLines.push({
            lineNumber: i,
            raw: raw,
            type: constants_1.LineType.INVALID
        });
    }
    return parsedLines;
}
exports["default"] = parse;
