"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var clrc_1 = require("clrc");
var react_1 = require("react");
var get_random_string_1 = __importDefault(require("../../utils/get_random_string"));
exports.default = (function (lrcs) {
    var lines = (0, react_1.useMemo)(function () {
        var e_1, _a, e_2, _b;
        var map = new Map();
        try {
            for (var lrcs_1 = __values(lrcs), lrcs_1_1 = lrcs_1.next(); !lrcs_1_1.done; lrcs_1_1 = lrcs_1.next()) {
                var lrc = lrcs_1_1.value;
                var list = (0, clrc_1.parse)(lrc).filter(function (l) { return l.type === clrc_1.LineType.LYRIC; });
                try {
                    for (var list_1 = (e_2 = void 0, __values(list)), list_1_1 = list_1.next(); !list_1_1.done; list_1_1 = list_1.next()) {
                        var item = list_1_1.value;
                        var current = map.get(item.startMillisecond) || {
                            id: (0, get_random_string_1.default)(),
                            startMillisecond: item.startMillisecond,
                            children: [],
                        };
                        current.children.push({
                            id: (0, get_random_string_1.default)(),
                            lineNumber: item.lineNumber,
                            raw: item.raw,
                            content: item.content,
                        });
                        map.set(item.startMillisecond, current);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (list_1_1 && !list_1_1.done && (_b = list_1.return)) _b.call(list_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (lrcs_1_1 && !lrcs_1_1.done && (_a = lrcs_1.return)) _a.call(lrcs_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return __spreadArray([], __read(map.values()), false).sort(function (a, b) { return a.startMillisecond - b.startMillisecond; });
    }, __spreadArray([lrcs.length], __read(lrcs), false));
    return lines;
});
