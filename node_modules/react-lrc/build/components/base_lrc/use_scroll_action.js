"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-param-reassign */
var react_1 = require("react");
var resize_observer_polyfill_1 = __importDefault(require("resize-observer-polyfill"));
var debounce_1 = __importDefault(require("../../utils/debounce"));
var constants_1 = require("./constants");
exports.default = (function (_a) {
    var root = _a.root, autoScroll = _a.autoScroll, lineIndex = _a.lineIndex, lines = _a.lines, verticalSpace = _a.verticalSpace;
    var indexMapRef = (0, react_1.useRef)(new Map());
    var scrollToCurrentLine = (0, react_1.useCallback)(function () {
        if (!root) {
            return;
        }
        var indexMap = indexMapRef.current.get(lineIndex);
        if (indexMap) {
            root.scrollTop =
                indexMap.offsetTop - root.clientHeight * 0.5 + indexMap.height / 2;
        }
        else {
            root.scrollTop = 0;
        }
    }, [lineIndex, root]);
    (0, react_1.useLayoutEffect)(function () {
        if (root) {
            var caculateIndexMap = function () {
                var indexMap = new Map();
                var lrcLineNodeList = root.querySelectorAll(".".concat(constants_1.LINE_CLASSNAME));
                for (var i = 0, length_1 = lrcLineNodeList.length; i < length_1; i += 1) {
                    var lrcLineNode = lrcLineNodeList[i];
                    indexMap.set(i, {
                        height: lrcLineNode.clientHeight,
                        offsetTop: lrcLineNode.offsetTop,
                    });
                }
                indexMapRef.current = indexMap;
            };
            caculateIndexMap();
            var resizeDetector_1 = new resize_observer_polyfill_1.default((0, debounce_1.default)(caculateIndexMap));
            resizeDetector_1.observe(root);
            return function () { return resizeDetector_1.disconnect(); };
        }
    }, [root, lines, verticalSpace]);
    (0, react_1.useLayoutEffect)(function () {
        if (autoScroll) {
            scrollToCurrentLine();
        }
    }, [autoScroll, scrollToCurrentLine, lines, verticalSpace]);
});
