"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var throttle_1 = __importDefault(require("../../utils/throttle"));
var SCROLLABLE_KEYS = [' ', 'ArrowUp', 'ArrowDown'];
/**
 * detect user scroll
 * 1. wheel
 * 2. keyboard
 * 3. drag scrollbar
 * @author mebtte<hi@mebtte.com>
 */
exports.default = (function (_a) {
    var recoverAutoScrollInterval = _a.recoverAutoScrollInterval, recoverAutoScrollSingal = _a.recoverAutoScrollSingal;
    var _b = __read((0, react_1.useState)(true), 2), autoScroll = _b[0], setAutoScroll = _b[1];
    var timerRef = (0, react_1.useRef)();
    var handleUserScroll = (0, react_1.useCallback)(function () {
        window.clearTimeout(timerRef.current);
        setAutoScroll(false);
        timerRef.current = window.setTimeout(function () { return setAutoScroll(true); }, recoverAutoScrollInterval);
    }, [recoverAutoScrollInterval]);
    var mouseDownRef = (0, react_1.useRef)(false);
    var onMouseDown = (0, react_1.useCallback)(function () {
        mouseDownRef.current = true;
    }, []);
    var onMouseUp = (0, react_1.useCallback)(function () {
        mouseDownRef.current = false;
    }, []);
    var onMouseMove = (0, react_1.useMemo)(function () {
        return (0, throttle_1.default)(function () {
            if (mouseDownRef.current) {
                handleUserScroll();
            }
        });
    }, [handleUserScroll]);
    var onKeyDown = (0, react_1.useMemo)(function () {
        return (0, throttle_1.default)(function (event) {
            if (SCROLLABLE_KEYS.includes(event.key)) {
                handleUserScroll();
            }
        });
    }, [handleUserScroll]);
    var onWheel = (0, react_1.useMemo)(function () { return (0, throttle_1.default)(handleUserScroll); }, [handleUserScroll]);
    (0, react_1.useEffect)(function () {
        setAutoScroll(true);
    }, [recoverAutoScrollSingal]);
    /**
     * clear timer after unmount
     * @author mebtte<hi@mebtte.com>
     */
    (0, react_1.useEffect)(function () { return function () { return window.clearTimeout(timerRef.current); }; }, []);
    return {
        autoScroll: autoScroll,
        onWheel: onWheel,
        onKeyDown: onKeyDown,
        onMouseDown: onMouseDown,
        onMouseUp: onMouseUp,
        onMouseMove: onMouseMove,
    };
});
